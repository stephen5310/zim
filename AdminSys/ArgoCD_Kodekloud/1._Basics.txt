Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2024-07-23T21:52:47+02:00

====== 1. Basics ======
Created mardi 23 juillet 2024

===== Presentation =====

==== What is ArgoCD ====
* Declarative GitOps CD tool for k8s resources defined in a Git repo
* Continously monitors running apps and compare their live state to the desired state
* Reports the deviations and provide visualizations to help developers manually or automatically sync the live state with the desired state

==== Benefits of using ArgoCD ====
* Extends the benefits of declarative specifications and Git-based conf management
* First step in achieving continuous operations based on monitoring, analytics, and automated remediation
* Can deploy to multiple clusters and is enterprise-friendly (auditability, compliance, security, RBAC, SSO, and lot more)

==== How it works ====
* Follows gitops pattern by using Git repos as source of truth for the desired state of app and the target deployment envs
* Support k8s manifests as Kustomize apps, Helm Charts, Ksonnet apps, Jsonnet files, yaml/json manifests
* Automates the sync of the desired app state with each of the specified target envs

==== Concepts and Terminology ====
* Application: CRD, Group of k8s resources as defined by a manifest
* Application source type: Tool used to build the app (helm, kustomize, ksonnet)
* Project: Logical grouping of applications, useful for multiple teams using the same ArgoCD instance
* Target state: Desired state of an Application, as represented by files in a git repo
* Live state: What pods, configmaps, secrets, etc are created/deployed in a k8s cluster
* Sync status: Whether or not the live state matches with the target state
* Sync: The process of making an app moving to its target state
* Sync operation status: Whether or not a sync succeeded
* Refresh: Compare the latest code in git with the live state
* Health: The health of the app

==== Features ====
* Automated deployment of apps to specified target env in multiple clusters
* Support for multiple config management/templating tools (kustomize, helm, ksonnet, jsonnet, plain yaml)
* SSO Integration (OIDC, OAuth2, LDAP, SAML 2.0, ...)
* Multi-tenancy and RBAC policies for authorization
* Rollback/Roll-anywhere to any app conf commited in a git repository
* Health status analysis of app resources
* Automated configuration drift detection and visualization
* Out-of-the-box Prometheus metrics and alerting
* Notifications through various channels
* Audit trails for app events and API calls
* PreSync, Sync, PostSync hooks to support complex app rollouts (blue/green & canary upgrades)
* Webhook integration (Github, BitBucket, Gitlab)
* CLI and access tokens for automation and CI Integration
* Web UI which provides real-time view of an app activity
* Automated or manual sync of an app to its desired state

==== Architecture ====

{{./pasted_image.png?width=1500}}

==== Installation options ====
* Core:
	* Minimal, non-ha version of each component, without apiserver and UI
* Multi-tenant:
	* Non-HA:
		* install.yaml for cluster-admin installation, deploy apps cluster-wide, and on other clusters if credentials are provided
		* namespace-install.yaml for namespace install, deploy apps cluster-wide
	* HA:
		* ha/install.yaml and ha/namespace-install.yaml
* Apply a manifest: kubectl apply -n argocd -f https://github.com/argoproj/argo-cd/blob/master/manifests/install.yaml
* Use helm: helm repo add argo https://argoproj.github.io/argo-helm && helm install myargocd argo/argo-cd --version 4.8.0
* Download argocd cli:
curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
rm argocd-linux-amd64

==== CLI commands ====
* Get app list: argocd app list
* Create app: argocd app create <app_name> --repo <repo_url> --path <app_path_in_repo> --dest-namespace <dest_ns> --dest-server <dest_k8s_server>
* Sync app: argocd app sync <app_name>
* Get projects list: argocd proj list
* 
