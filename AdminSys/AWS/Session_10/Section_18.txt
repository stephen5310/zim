Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2022-09-09T19:50:47+02:00

====== Section 18 ======
Created vendredi 09 septembre 2022

====== Containers on AWS ======

===== ECS =====

* Elastic container service

==== Launch type ====

* Launching Docker containers on AWS launches ECS tasks on ECS Clusters
* EC2 Launch Type :
	* You provision and maintain the infra
	* Each EC2 instance must run the ECS Agent to register to the ECS Cluster
	* AWS starts and stop the containers and place them automatically
* Fargate Type :
	* You don't provision nor manage
	* Serverless
	* Just create task definitions
	* AWS just runs ECS tasks based on CPU / RAM needed
	* To scale, just increase the number of tasks

==== IAM Roles ====

* EC2 Launch Type :
	* Use **EC2 Instance Profile**
	* Used by ECS agent
	* Makes API calls to ECS service
	* Send container logs to CloudWatch Logs
	* Pull Docker image from ECR
	* Reference sensitive data in Secrets Manager or SSM Parameter Store
* **ECS Task Role** :
	* Allows each task to have a specific role
	* Use different roles for different ECS Services
	* Defined in the task definition

==== Load Balancer Integrations ====

* Supports ALB for most use cases
* NLB recommended only for high throughput / high performance, or pair with AWS Private Link
* ELB not recommended

==== Data Volumes ====

* Mount EFS file systems onto ECS Tasks
* Works for both EC2 and Fargate
* Tasks running in any AZ will share the same data
* Fargate + EFS = Serverless
* Use cases : persistent multi-AZ shared storage
* Cannot mount S3 as a file system

==== Auto Scaling ====

* Automatically increase/decrease the desired number of ECS tasks
* Uses AWS Application Auto Scaling :
	* ECS Service Average CPU Utilization
	* ECS Service Average Memory Utilization - Scale on RAM
	* ALB Request Count Per Target - metric coming from the ALB
* Target Tracking - scale based on target value for a specific CloudWatch metric
* Step Scaling - scale based on a specified CloudWatch Alarm
* Scheduled Scaling - scale based on a specified date/time (predictable change)
* Fargate Auto Scaling is much easier to setup

=== For EC2 instances ===
* ASG Scaling :
	* Scale ASG based on CPU Utilization
* ECS Cluster Capacity Provider
	* Used to automatically provision and scale the infra for your ECS Tasks
	* Capacity Provider paired with an ASG
	* Add EC2 Instances when needed

==== Example architectures ====

* ECS tasks invoked by Event occurence in Event Bridge :
	* Create a rule for an Event to run an ECS task when it occurs
	* The task can leverage a Task Role to execute actions on EC2 instances, S3 buckets, DynamoDB, ...
* ECS tasks invoked by Event Bridge Schedule :
	* Create a rule to run an ECS Task regularly (every 1h for ex)
* ECS SQS Queue :
	* Tasks poll for messages in SQS Queue
	* Auto Scale based on number of messages in the Queue

===== ECR =====

* Elastic Container Registry
* Store and manage Docker images on AWS
* Private and Public repository (Amazon ECR Public Gallery https://gallery.ecr.aws)
* Fully integrated with ECS, backed by Amazon S3
* Access is controlled through IAM
* Supports image vulnerability scanning, versioning, tags, lifecycle, ...

===== EKS =====

* Elastic Kubernetes Service
* Supports EC2 for workers and Fargate for serverless
* Use case : If your company is already using Kubernetes on-premises or in another cloud and wants to migrate to AWS

==== Node Types ====

* Managed Node Groups :
	* Creates and manages Nodes (EC2 instances)
	* Nodes are part of an ASG managed by EKS
	* Supports On-Demand or Spot Instances
* Self-Managed Nodes :
	* Nodes created by you and registered to the EKS cluster and managed by an ASG
	* Supports prebuilt AMI
	* Supports On-Demand or Sport Instances
* AWS Fargate
	* No maintenance required; no nodes managed

==== Data Volumes ====

* Need to specify StorageClass manifest on your EKS cluster
* Leverages a Container Storage Interface (CSI) compliant driver
* Supports EBS, EFS (Fargate), FSx for Lustre and NetApp ONTAP

===== App Runner =====

* Fully managed service that makes it easy to deploy web apps and APIs at scale
* No infra exp required
* Start with source code or container image
* Automatically buids and deploy the web app
* Automatic scaling, HA, LB, encryption
* VPC access support
* Connect to DB, cache and message queue services
* Use cases : web apps, APIs, microservices, rapid production, deployments
