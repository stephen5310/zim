Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2022-07-08T11:17:50+02:00

====== Section 9 ======
Created vendredi 08 juillet 2022

====== RDS + Aurora + ElastiCache ======

===== Amazon RDS =====

* Relational Database Service
* Managed :
	* PostGreSQL
	* MySQL
	* MariaDB
	* Oracle
	* Microsoft SQL Server
	* Aurora (AWS Proprietary)
* Managed service with :
	* Continuous backups and restore to specific timestamp (Point in Time Restore)!
		* Daily full backup
		* Transaction logs backup every 5mn
		* Up to 35 days retention (default 7)
		* Snapshots are manually triggered and can be kept alayw
	* Monitoring dashboards
	* Read replicas :
		* up to 5
		* within AZ, cross AZ or Cross Region (paying replication for the last one)
		* replication is ASYNC
		* can be promoted to DB
		* automatic failover using the single DNS name in case of loss of A2, network, instance or storage failure
	* Multi AZ setup for DR
	* Migrate from single AZ to multi AZ :
		* zero downtime
		* a snapshot is taken and a new DB is restored from it in a new AZ
	* Maintenance windows for upgrades
	* Scaling manually
	* Auto scaling capability if :
		* storage have not exceeded maximum threshold
		* free storage is less thant 10% of allocated storage
		* low storage lasts at least 5mn
		* 6 hours have passed since last modification
	* Storage backed by EBS (gp2 or io1)
	* Security :
		* Encryption
			* At rest for master (necessary) and reads with AWS KMS AES-256 :
				* definition at launch time
				* Transparent Data Encryption for Oracle and SQL Server
			* In-flight :
				* SSL certs to encrypt data in flight
				* SSL options with trust cert when connecting
				* enforce SSL 
					* PSQL : rds.force_ssl=1 in the AWS RDS Console
					* MySQL : GRANT USAGE ON *.* TO 'mysqluser'@'%' REQUIRE SSL;
		* Network :
			* Private subnet is used
			* Uses SG
		* Access Management :
			* IAM policies
			* username/pwd to login
			* IAM-based can be used for MySQL and PSQL (auth token through IAM and RDS API call)
* No SSH access
* Go to RDS to create and manage

===== Amazon Aurora =====

* Proprietary from AWS
* PSQL and MySQL drivers are supported
* Cloud optimized
* Storage automatically grows up to 128TB in increments of 10GB
* HA and scaling :
	* Can have 1 master and 15 replicas (vs 5 MySQL), replication is faster
	* 6 copies of data across 3 AZ (4/6 for w and 3/6 for r)
	* Self healing with p2p replication
	* Storage is striped acress 100s of volumes and is replicated across 3 AZ by default
	* Support cross region replication
	* Writer endpoint to take write orders from client and send them to the master
	* Reader endpoint to connect automatically to r replicas
	* Custom endpoints (deactivates Reader) to query specific subsets of replicas for special workloads
	* Serverless mode :
		* automated DB instantiation and autoscaling based on actual usage
		* pay / sec
		* Leverages Proxy fleet
	* Multi-master :
		* All r replicas write also
		* Failover is immediate
	* Global Database :
		* 1 Primary Region for rw
		* Up to 5 secondary ro regions, replication lag < 1s
		* Up to 16 r replicas / secondary region
		* Decreased latency
		* Promoting another region to rw for DR RTO < 1mn
* Failover is instantaneous (HA native)
* Costs 20% more than RDS
* Same security as RDS
* No SSH
* Machine Learning :
	* ML-based predictions via SQL for fraud detection, ads targeting, sentiment analysis, product recommendations
	* Simple, optimized and secure integration between Aurora and AWS ML services
	* Supports Amazon SageMaker, Amazon Comprehend

===== Elasticache =====

* Managed cache
* In-memory DB with high perf, low latency
* Reduces load off of DB for read intensive workloads
* Makes applications stateless
* Cache hit check, Read from DB if cache miss then write data to cache
* Redis :
	* Muti AZ with auto-failover
	* Read Replicas to scale reads and have HA
	* Data Durability using AOF persistence
	* Backup and Restore features
* Memcached :
	* Multi-node data partitions (shards)
	* No HA
	* Non persistent
	* No backup and restore
	* Multi-threaded architecture
* Security
	* IAM policies are for API-level only, not for auth
	* Redis AUTH :
		* pwd/token auth to redis cluster
		* on top of SG
		* supports in-flight encryption
	* Memcached :
		* SASL-based auth
* Load data using :
	* Lazy loading : all read data is cached, can become scale
	* Write Through : update in the cache when written to DB
	* Session Store : store temporary session data using TTL
* Redis particular use case :
	* Gaming leaderboards leveraging Redis Sorted sets for uniqueness and ordering in real time
