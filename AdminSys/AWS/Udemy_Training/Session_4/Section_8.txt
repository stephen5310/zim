Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2022-07-04T13:17:23+02:00

====== Section 8 ======
Created lundi 04 juillet 2022

====== High Availability and Scalability ======

* Vertical Scaling : Increase instance size (= scale up / down)
	* From : t2.nano - 0.5GB RAM, 1 vCPU
	* To : u- 12tb 1.metal - 12.3TB of RAM, 448 vCPUs
* Horizontal Scaling : Increase number of instances (= scale out / in)
	* Auto Scaling Group
	* Load Balancer
* High Availability : Run instances for the same application across muti AZ
	* Auto Scaling Group multi AZ
	* Load Balancer multi AZ

===== Elastic Load Balancing (ELB) =====

* LB are servers that forward traffic to multiple servers downstream
* Spread load accross multiple downstream instances 
* Expose a single point of access to your application
* Seamlessly handle failures of downstream instances
* Do regular health checks to your instances
* Provide SSL temination for your websites
* Enforce stickiness with cookies
* HA accross zones
* Separate public traffic from private traffic
* **ELB is managed by AWS and integrated in many AWS offerings / services** :
	* EC2, EC2 auto scaling groups, Amazon ECS
	* AWS certificate manager (ACM), CloudWatch
	* Route 53, AWS WAF, AWS Global Accelerator
* Some can be setup as internal (private) or external (public)
* For the SG conf :
	* The LB will take traffic on the app ports from customers (allow from any on port)
	* The app will allow traffic only from LB (allow from SG of the LB)

* 4 kinds of managed Load Balancers : **Go to EC2 > Load balancers to create**

==== Classic Load Balancer (v1) (CLB) ====

* HTTP/S, TCP, SSL
* Fixed hostname
* deprecated

==== Application Load Balancer (v2) (ALB) ====

* HTTP/S, WebSocket, 
* multiple applications on the same machine, great for micro services
* routing table based on target groups (path, hostname, query string, headers)
	* To do this, **edit the listener to add rules at Load balancers > Listeners**
	* Like an ACL, the order of the rules counts
* health check at target group level
* port mapping to redirect to a dynamic port in ECS
* Target Groups can be :
	* EC2 instances managed by an Auto Scaling Group
	* ECS tasks managed by ECS itself
	* Lambda functions
	* Private IP Addresses
* The app server doesn't see the IP of the client directly, it is managed at application level
* The X-Forwarded-For, X-Forwarded-Port, X-Forwarded-Proto, are headers used resp for client IP, port and protocol

==== Network Load Balancer (v2) (NLB) ====

* Extreme performance TCP, TLS, UDP traffic
* Handle million of requests/seconds
* Less latency 100ms vs 400ms for ALB
* One static IP per AZ, Supports Elastic IP (dedicated specific IP), useful for whitelisting specific IP
* Not included in free tier
* Use also Target Groups (EC2, IP or ALB)
* Beware of the SG to allow HTTP traffic with any as origin (NLB transfers the traffic as is)

==== Gateway Load Balancer (v3) (GWLB) ====

* Deploy, scale and manage a fleet of 3rd party network virtual appliances
* These are firewalls, IDPS, deep packet inspection systems, payload manipulation, ...
* Modifies the routing table to forward packets to the virtual appliances Target Group before returning them to apps
* It acts as a :
	* Transparent Network Gateway : single entry/exit for all traffic
	* Load Balancer : distributes traffic to your virtual appliances
* Uses GENEVE protocol on port 6081
* Target groups can be EC2, Private IPs

==== Sticky Sessions ====

* The same client is always redirected to the same instance
* Available for CLB and ALB
* Go to Target groups > Actions > Edit to configure
* Uses a cookie for stickiness with an expiration date you can control
	* Application based
		* Custom cookie
			* generated by the target
			* can include any custom attributes required by the app
			* Only one name for each target group (AWSALB, AWSALBAPP, AWSALBTG are reserved)
		* Application cookie
			* Generated by the LB
			* name is AWSALBAPP
	* Duration based
		* generated by the LB
		* name is AWSALB for ALB and AWSELB for CLB
* The user must not lose his session data

==== Cross-Zone LB ====

* The load balancers balance traffic evenly to instances regardless of the AZ
* Always on and not charged for ALB
* Disabled by default and charged for inter AZ data if enabled for NLB
* Disabled by default and not charged if enabled for CLB
* To enable or disable, select a LB and scroll down to attributes

==== SSL/TLS Certificates ====

* Manage certificates with AWS Certificate Manager
* X.509 certs are used
* You can create and upload your own certs
* HTTPS listener :
	* Must specify a default cert
	* Can add an optional list of certs to support multiple domains
	* Clients use Server Name Indication to specifying the hostname they reach
	* Can specify a security policy to support older versions of SSL/TLS
* SNI :
	* Allows a single server to serve multiple websites (each with it Target Group), each with its own certificate
	* The client indicates the hostname of the target server in the initial SSL handshake
	* Only for ALB and NLB
* To configure, add a listener to the LB

==== Connection draining ====

* Connection draining for CLB
* Deregistration Delay for ALB and NLB
* Time to complete in-flight requests while the instance is de-registering or unhealthy
* Between 1s to 1H (defaul 5mn)
* Can be disabled
* Stops sending new requests to EC2 instance which is de-registering

==== Auto Scaling Group ====

* Scale out or in to match an increased or decreased load
* Automatically register new instances to LB
* Re-create instance if terminated
* Availabe in free-tier
* Set min, desired and max capacity
* Define a **Launch Template** :
	* AMI + instance type
	* EC2 user data
	* EBS volumes
	* Security groups
	* SSH key pair
	* IAM roles for instances
	* Network + Subnets Info
	* LB info ... 
* Can scale based on CloudWatch Alarms (on custom metric)
* Go to EC2 > Auto Scaling Groups
* Define **Scaling Policies :**
	* Dynamic scaling
		* Target Tracking Scaling (average ASG CPU stay around 40% usage)
		* Simple / Step Scaling (based on CloudWatch alarms to scale in or out)
		* Scheduled actions (anticipate by scheduling)
	* Predictive scaling (based on forecasts of loads to schedule)
	* Good metrics to scale on are :
		* CPUUtilization
		* RequestCountPerTarget
		* Average Network In / Out
		* Any custom metric using CloudWatch 
	* Scaling cooldowns :
		* Period of inactivity after scaling (default 5mn)
		* ASG won't launch or terminate additional instances
		* Use ready-to-use AMI to reduce conf time to serve requests faster and reduce cooldowns
* ASG Default Termination Policy
	* find the AZ with the most number of instances
	* Terminate the one with the oldest launch conf
	* Tries to balance number of instances between AZ
* ASG Lifecycle Hooks to have the option to do extra checks and install stuff before lauch or delete
* Launch conf is old and must be re-created every time
* Launch template is newer and
	* can be versioned
	* create parameters subsets (partial conf to reuse and inheritance)
	* Provision using both On-Demand and spot instances
	* Can use T2 unlimited burst feature
	* Recommended by AWS
