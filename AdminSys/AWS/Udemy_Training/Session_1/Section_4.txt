Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2022-06-15T19:54:38+02:00

====== Section 4 ======
Created mercredi 15 juin 2022

===== IAM Global Service =====

* Search for the IAM service in the search bar and click on it to access IAM dashboard

==== Add an IAM user (different from the root user) ====

* Click on Users on the left pan to access the user menu
* Click on the Add Users button and follow the steps

==== Login with an IAM user ====

* You need the account ID of the root user used to create the IAM user
* From the login page select login with an IAM user and follow the steps

==== IAM Policies ====

* Inheritable
* Structure :
	* Version : policy language version
	* Id : (optional) identifier
	* Statement : one or more individual statements defining the policies
		* Sid : (optional) identifier
		* Effect : Allow or Deny
		* Principal : Account, User or Role the policy will be applied to
		* Action : List of actions that will be allowed or denied
		* Resource : List of resources the actions will be applied to
* To create a policy :
	* Go to Policies
	* Click on Create policy
	* Choose between writing JSON or visual editor
* **Password policies** are a must :
	* Go to Account settings
	* Click on Change password policy and follow the steps

==== MFA ====

* You have the choice between these items to add a security layer to the authentication :
	* Virtual MFA device (Authenticator)
	* Universal 2nd factor security key
	* Hardware key fob MFA device
* To add MFA :
	* Click on the account name dropdown button at the top right
	* Click on Security credentials
	* Click on MFA then on Activate MFA
	* Follow the steps

==== Roles ====

* Permission given to services
* To create a role go to roles, click on create a role and follow the steps

==== Other IAM tools ====

* **Credentials Reports** all the account users and the status of their credentials
	* On the bottom left click on Credential report and click on Download to generate and download
* **Access Advisor** shows service permissions granted to a user and when those services were last accessed
	* Click on a user and select the Access Advisor tab among the tabs

===== AWS CLI AND SDK =====

Three ways to access to AWS :
* Management console (password + MFA)
* CLI (access keys)
* SDK (access keys)

==== Access keys ====

* Generated through the Management console
* Managed by users themselves

==== CLI ====

* Interact with AWS service within a shell
* Direct access to public APIs
* Manage resources using scripts
* Open source

==== SDK ====

* Language specific APIs
* Access and manage AWS services programmatically
* Embedded with your application
* Support for mobile, web, IoT, and so on

==== Windows CLI setup ====

* open a terminal and execute the following command : msiexec.exe /i https://awscli.amazonaws.com/AWSCLIV2.msi
* follow the steps
* To test execute the following command : aws --version
* A similar output is expected : aws-cli/2.4.5 Python/3.8.8 Windows/10 exe/AMD64 prompt/off

==== Linux CLI setup ====

''curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"''
''unzip awscliv2.zip''
''sudo ./aws/install''

==== Create an access key ====

* **Never use the root account** (use an IAM one instead)
* Go to Security credentials
* In AWS IAM Credentials tab, click on Create access key
* Download the csv file

==== Use an access key ====

* Execute this command : aws configure
* Enter the information asked (you can find it in the csv file)
* Choose a region
* The output format is not mandatory
* Once done test with a command : aws iam list-users

==== AWS Cloudshell ====

* Shell on the web interface
* Available for some regions
* Switch to a region where it is available and click on the powershell icon on the top right icon list

===== Guidelines and best practices =====

* Don't use the root account except for setup
* One physical user = One IAM user
* Assign users to groups and assign permissions to groups (RBAC)
* Create a strong password policy
* Use and enforce MFA usage
* Create and use roles to give permissions to services
* Use access keys for programmatic access
* Audit permission of the account with Credential reports
* Never share IAM Users and Access keys
