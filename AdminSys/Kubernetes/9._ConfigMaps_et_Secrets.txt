Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2021-11-25T17:00:46+00:00

====== 9. ConfigMaps et Secrets ======
Créée le jeudi 25 novembre 2021

===== ConfigMaps =====

Permettent de découpler les configurations de l'image du conteneur.
Le configs sont stockées sous la forme clé-valeur et utilisées par les composants sous la forme de variables d'environnement, ensemble de commande, d'arguments.

==== Créer la configmap en ligne de commande ====

```
kubectl create configmap my-config --from-literal=key1=value1 --from-literal=key2=value2
```
* Afficher la configmap en yaml
```
kubectl get configmaps my-config -o yaml
```

==== Créer la configmap à l'aide d'un fichier de configuration ====

* Créer le fichier configmap.yaml avec un contenu similaire au suivant
```
apiVersion: v1
kind: ConfigMap
metadata:
  name: customer1
data:
  TEXT1: Customer1_Company
  TEXT2: Welcomes You
  COMPANY: Customer1 Company Technology Pct. Ltd.
```
* Créer la configmap
```
kubectl create -f customer1-configmap.yaml
```

==== Créer la configmap à l'aide d'un fichier ====

* Créer un fichier permission-reset.properties avec le contenu suivant
```
permission=read-only
allowed="true"
resetCount=3
```
* Créer la configmap
```
kubectl create configmap permission-config --from-file=permission-reset.properties
```

===== Utiliser les configmaps dans les pods =====

==== Comme variables d'environnement ====

* Charger toute la configmap **full-config-map** dans les variable d'environnement du conteneur **myapp-full-container**
```
containers:
  - name: myapp-full-container
	image: myapp
	envFrom:
	- configMapRef:
	  name: full-config-map
```
* Charger des valeurs spécifiques de **config-map-1** and **config-map-2** dans **myapp-specific-container**
```
containers:
  - name: myapp-specific-container
	image: myapp
	env:
	- name: SPECIFIC_ENV_VAR1
	  valueFrom:
		configMapKeyRef:
		  name: config-map-1
		  key: SPECIFIC_DATA
	- name: SPECIFIC_ENV_VAR2
	  valueFrom:
		configMapKeyRef:
		  name: config-map-2
		  key: SPECIFIC_INFO
```

==== Comme volume ====

Monter un **vol-config-map** dans un pod.
Pour chaque clé de la ConfigMap, un fichier est créé dans le chemin de montage (où le fichier est nommé avec le nom de la clé) et le contenu de ce fichier devient la valeur de la clé respective.

```
containers:
  - name: myapp-vol-container
	image: myapp
	volumeMounts:
	- name: config-volume
	  mountPath: /etc/config
  volumes:
  - name: config-volume
	configMap:
	  name: vol-config-map
```

===== Secrets =====

Avec les secrets, nous pouvons partager des informations sensibles telles que des mots de passe, des jetons ou des clés sous la forme de paires clé-valeur, comme avec ConfigMaps ; ainsi, nous pouvons contrôler la manière dont les informations contenues dans un secret sont utilisées, ce qui réduit le risque d'exposition accidentelle. 
Dans les déploiements ou d'autres ressources, l'objet Secret est référencé, sans que son contenu soit exposé.

Par défaut les secrets sont stockés en clair dans etcd. L'encryptage doit être activé sur le serveur API.

==== Créer un secret à partir d'un texte en clair ====

* Créer le secret
```
kubectl create secret generic my-password --from-literal=password=mysqlpassword
```
* Analyser le secret (n'affiche pas le contenu)
```
kubectl get secret my-password
kubectl describe secret my-password
```

==== Créer un secret à partir d'un fichier (mauvaise pratique) ====

* Créer le fichier secret.yaml
```
apiVersion: v1
kind: Secret
metadata:
  name: my-password
type: Opaque
stringData:
  password: mysqlpassword
```
* Créer le secret
```
kubectl create -f secret.yaml
```

==== Utiliser les secrets dans les pods ====

* En utilisant les variables d'environnement
```
spec:
  containers:
  - image: wordpress:4.7.3-apache
	name: wordpress
	env:
	- name: WORDPRESS_DB_PASSWORD
	  valueFrom:
		secretKeyRef:
		  name: my-password
		  key: password
```
* En montant le fichier comme un volume
```
spec:
  containers:
  - image: wordpress:4.7.3-apache
	name: wordpress
	volumeMounts:
	- name: secret-volume
	  mountPath: "/etc/secret-data"
	  readOnly: true
  volumes:
  - name: secret-volume
	secret:
	  secretName: my-password
```
