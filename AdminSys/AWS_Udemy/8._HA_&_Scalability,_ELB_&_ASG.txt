Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2023-07-19T23:29:56+02:00

====== 8. HA & Scalability, ELB & ASG ======
Created mercredi 19 juillet 2023

===== HA & scalability for EC2 =====

* Vertical scaling (up and downn) : increase/decrease instance size
* Horizontal scaling (in and out) : increase/decrease number of instances (ASG, ELB)
* HA : run same instances multi-AZ

===== ELB =====

* Use to :
	* Spread load across multiple downstream instances
	* Expose a single point of access to app
	* Seamlessly handle failures of downstream instances
	* Do regular healthchecks to instances
	* Provide SSL termination to websites
	* Enforce stickiness with cookies
	* HA across zones
	* Separate public traffic from private one
* Managed by AWS
* Integrated with many AWS services : EC2, ASG, ECS, Certificate Manager, CloudWatch, R53, WAF, Global Accelerator
* Healthchecks (HC) is done on a port and a route : port 4567 endpoint [[/health]]
* 4 kinds of load balancers

==== Application Load Balancer (ALB) ====
* Layer 7 (application only) load balancer
* Load balancing multiple HTTP apps across machines using target groups, based on URL path, hostname, headers, query string
* Load balancing multiple applications on the same machine (containers)
* Support for HTTP/2 and WebSocket
* Support for redirects (http to https)
* Great for microservices and container-based apps
* Port mapping feature to redirect to a dynamic port in ECS
* Target groups can be :
	* EC2 instances or ASG, HTTP 
	* ECS tasks (managed by ECS), HTTP
	* Lambda functions, HTTP request translated to JSON
	* IP Addresses (only private)
* Can route to multiple target groups
* HC are at the target group level
* The ALB gets a fixed hostname
* The servers behind don't see the IP, port and protocols used by the sender. To retrieve them use headers :
	* X-Forwarded-For for the IP
	* X-Forwarded-Port for the port
	* X-Forwarded-Proto for the protocol
* Routing details are configured in the **listener rules** of the ALB
* It is better to allow only traffic coming from the load balancer

==== Network Load Balancer (NLB) ====
* Layer 4 (TCP/UDP) high performance :
	* Handles millions of requests per seconds
	* Less latency ~ 100ms (vs 400ms for ALB)
* One static IP per AZ, support Elastic IP (for IP whitelisting)
* Can use TCP in the front, and HTTP or TCP in the back
* Target groups can contain :
	* EC2 instances
	* Private IPs
	* ALBs
* HC support TCP, HTTP and HTTPS
* No SG is defined so access is managed by instances SGs

==== Gateway Load Balancer (GLB) ====
* Layer 3 (IP packets)
* Deploy, scale and manage a fleet of 3rd party network virtual appliances in AWS
* Example : Firewalls, IDS, IPS, Deep Packet Inspection Systems, payload manipulation, ...
* Example of use-case : 
	* Update route tables so that all traffic 1st goes through GLB
	* The GLB forwards the traffic to the appliances for doing what they are supposed to
	* The appliances send back the traffic to the GLB
	* The GLB forwards the traffic to the destination instances
* Combines the functionnalities of :
	* Transparent Network Gateway : single entry/exit for all traffic
	* Load Balancer : distributes traffic to virtual appliances
* Use **GENEVE** protocol on port 6081
* Target groups can contain EC2 instances and private IPs

==== Sticky Sessions ====
* Same client is always redirect to the same instance behind the ELB
* Works with CLB, ALB and NLB
* Uses a cookie with stickiness and expiration date :
	* Application based :
		* Custom cookie :
			* Generated by the target
			* Can include any custom attributes required by the app
			* Cookie name must be specified individually for each TG
			* Don't use AWSELB, AWSALB, AWSALBAPP or AWSALBTG as they are reserved for the ELB
		* Application cookie :
			* Generated by the ELB
			* Cookie name is AWSALBAPP
	* Duration based :
		* Generated by the ELB
		* Cookie name is AWSELB for CLB and AWSALB for ALB
* May bring imbalance to the load over the backend

==== Cross-Zone Load-balancing ====
* Each ELB distributes traffic evenly across all registered instances in all AZ
* For ALB :
	* Enabled by default, can be disabled at TG level
	* No charges for inter AZ data
* For ELB and CLB :
	* Disabled by default
	* Charged for inter AZ traffic

==== SSL Certs ====
* ELBs use X.509 certs (SSL/TLS)
* Can manage certs using Amazon Certificate Manager (ACM)
* Can upload our own certs
* HTTPS listener :
	* Must specify a default cert
	* Can add an optional list of certs to support multiple domains
	* Clients use SNI to specify the hostname they reach
	* Ability to specify a security policy to support older versions of SSL/TLS (legacy clients)
* SNI is a recent protocol :
	* It requires the client to indicate the hostname of the target server in the initial SSL handshake
	* The server returns the correct certificate if found, otherwise it will return the default one
	* Works only for ALB, NLB and Cloudfront

==== Connection Draining / Deregistration Delay ====
* Time to complete in-flight requests while the instance is de-registering or unhealthy
* Stops sending new requests to EC2 instance which is de-registering
* Between 1 and 3600s (default 300)
* Disable by setting to 0
* Set a low value only if requests are short

===== Auto-Scaling Groups =====

* Scale out to match an increased load
* Scale in to match a decreased load
* Ensure we have a min and max number of instances running (Configure a desired number also)
* Automatically register new instances to ELB
* Re-create instance in case a previous one is terminated
* Free, charged only for underlying instances
* Configure with Launch Template (replaces Launch Configuration) by specifying :
	* AMI + Instance type
	* EC2 User Data
	* EBS Volumes 
	* SG
	* SSH key pair
	* IAM Roles for EC2 instances
	* Network + Subnets Information
	* Load Balancer Information
* Specify Min Size, Max Size, Initial Capacity
* Configure Scaling Policies :
	* Possible to scale based on CloudWatch alarms
	* An alarm monitors a metric (Average CPU, or a custom one)
	* Metrics like Average CPU are computed for the overall ASG instances

==== Scaling Policies ====
* Target Tracking
	* Most simple, easy to setup
	* Example : Set average ASG CPU to stay around 40%
* Simple / Step Scaling
	* When a Cloudwatch alarm is triggered (example CPU > 70%), then add 2 units
	* When a Cloudwatch alarm is triggered (example CPU < 30%), then remove 1 unit
* Scheduled Actions
	* Anticipate a scaling based on known usage patterns
	* Example : increase the min capacity to 10 at 5pm on Fridays
* Predictive scaling
	* Continuously forecast and schedule scaling ahead
* Good metrics to scale on :
	* CPUUtilization : Average CPU usage
	* RequestCountPerTarget : Make sure the number of requests per EC2 instance is stable
	* Average Network In / Out : If the app is network bound
	* Any custom metric pushed to CloudWatch
* After a scaling activity there is a cooldown period (default 300s) :
	* ASG does not scale during this period to allow for metrics to stabilize
	* Ready to use AMI can help reduce cooldown periods
