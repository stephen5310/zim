Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2022-01-27T09:30:59+00:00

====== Process ======
Created jeudi 27 janvier 2022

===== Opérations sur le SaaS Actility =====

==== Obtenir version ThingPark ====

* TPW :
	* Check twa packet version on server and ask R&D

==== Commandes spéciales lrr ====

* Redémarrage en force : killall lrr.x
* Redémarrage simple : [[/etc/init.d/lrr]] restart

==== Taguer des GW ====

* Le tag est pour les GW
* Il permet d'envoyer des downlinks en multicast depuis la GW
* On crée le multicast group comme un device sur la GW

==== Débloquer des commandes ====

* se connecter à l'instance marketplace en cherchant les accès dans pleasant (pwm)
* usurper l'identité du supplier avec l'ID actility-sup pour accéder à sa vue supplier
* accéder à l'onglet Orders et lancer la recherche pour voir la liste des commandes et leur état
* cliquer sur éditer pour choisir une méthode de débloquage :
	* Retry notification lorsqu'une erreur est survenue
	* Continue without notification lorsque l'application est déjà active
	* Abort si les actions précédentes n'ont pas fonctionné
* on peut aussi annuler la transaction directement dans la base de données lorsque les actions depuis l'interface n'ont pas fonctionné
* se connecter à la plateforme du client pour vérifier si la transaction a abouti

==== Connectivity plan inconsitency ====

* Only for TPW 6.1
* Execute the following command on an SMP server : 

==== Connexion en reverse ssh à une BS ====

* se connecter au LRC en fonction du client (Swisscom, SaaS)
* se connecter en telnet : telnet 0 2009
* ouvrir un port (commence par deux et a 5 caractères) pour la connexion : lrr shell <lrrid> openssh -P <portnumber> ?
* générer le mot de passe root de la BS
* il faudra parfois se connecter au TWA du client pour déterminer le UUID pour la génération du mot de passe
* se connecter au serveur support pour se connecter par reverse ssh à la BS en utilisant le mot de passe généré: ssh root@localhost -p <port_number>
* se déconnecter du serveur et fermer les connexions en telnet depuis le LRC : lrr shell <lrrid> closessh ?

==== Déterminer le LRRID à partir du UUID ====

* lorsque la BS est déclarée à partir de son UUID son ID est généré par le TWA
* exécuter la commande suivante sur le LRC dans le répertoire /home/actility/FDB_lora/l/  :
	* grep -ril 001558-4658425300003B0D
	* a pour les devices
	* l pour les BS
* on peut aussi se rendre dans la BS sur RCA

==== Supervision des BS sur le SaaS TPE ====

* chaque subscriber est son propre network provider
* rechercher le subscriber du client en filtrant les subscribers par organization
* impersonner le subscriber pour avoir accès à sa vue

==== Augmenter le niveau de logs sur une GW ====

* lrr shell $ID tracep <level> : pour level essayer 0 ou 1 et vérifier, parfois modifier le fichier et redémarrer ne suffit pas

* lrrshell $GW "setiniparam checkvpn2 checkvpn2 tracelvl 1" et relancer le process après

==== Mise à jour des LRR ====

* mettre les LRRID dans un array
* vérifier la connectivité en vérifiant la version : lrrshell <lrr_id> version
* lancer l'upgrade (lance le redémarrage aussi) sur chaque BS en parcourant l'array : lrrshell <lrr_id> "upgrade -V 2.6.56_2 ?"
* lancer la commande de vérification de la version après redémarrage (2mn à 3mn après l'upgrade)

==== Génération, révocation, renouvellement de certificats ====

=== Ancienne façon ===
* créer le fichier csv avec le format approprié en utilisant les LRRID
* copier le fichier sur le RCA (10.112.13.112) s'y connecter par SSH
* copier le fichier dans le répertoire /usr/local/ejbca/input en passant root (sudo rootsh)
* usurper l'identité de jboss-as : sudo -u jboss-as -s
* exécuter la commande suivante dans le répertoire /usr/local/ejbca/input : 
	* pour Swisscom : python ../bin/LRR_manager_Swisscom.py <file_name> Swisscom
	* pour les autres : python ../bin/LRR_manager.py <file_name> <vendor_name>
* l'exécution peut être longue. Se connecter par ssh au bastion (54.171.132.100) si on veut exécuter un tmux (tmux new -s <session_name>)

=== Nouvelle façon ===
1. Se connecter à la machine RCA2 - EU
ssh 10.112.23.112
[centos@aws-eu-prd-rca2 ~]$ sudo rootsh
[root@aws-eu-prd-rca2 centos]# podman exec -it ejbca bash
[jboss@aws-eu-prd-rca2 ~]$ cd /opt/scripts/

2. Créer le fichier csv par exemple:
cat test-swisscom1.csv
revoke-and-delete;004A09XX;1
create;004A09XX;1

3. Lancer le script de création de cert
python /container-workdir/lrr-manager/conf/LRR_manager_swisscom.py test-swisscom1.csv Swisscom

4. Lancer le script de chiffrage des certificats:
/container-workdir/lrr-manager/conf/swisscom_enc.sh

5. Se deconnecter du container et envoyer les certs sur les SLRC Swisscom
[[/root/vpn_cfg_sync.sh]]

==== Mise à jour des certificats sur les BS Swisscom ====

* se connecter par ssh au LRC (10.13.10.12)
* utiliser le script update_certs.sh dans le répertoire ~/stephen_update_certs/
* vérifier si la connexion est établie avec la BS : lrrshell <lrr_id> "ps | ipsec listcerts ?"
* faire un checkvpn et redémarrer la BS : lrrshell <lrr_id> "ps | /etc/init.d/checkvpn clean && reboot"
* vérifier si le certificat a été mis à jour :  lrrshell <lrr_id> "ps | ipsec listcerts ?"

==== Copie des certificats depuis le serveur support sur les BS ====

* copier le certificat depuis le RCA sur le serveur support : sftp download23@slrc1.eu.thingpark.com:/Lrr_prod-eu_apik-ope_0B0310B9/Lrr_prod-eu_apik-ope_0B0310B9.tar.gz.enc   /tmp/
* envoyer le certificat depuis le serveur support sur la GW : scp -P <GW_Port> <Cert_Name>.tar.gz.enc root@localhost:/tmp/secure

==== Génération des mots de passe root et USB keys pour les BS ====

* mettre la fonction lrrpass dans .bashrc ou .zshrc
* mettre les LRRID avec les lettres en minuscule dans un array
* passer en boucle sur l'array pour générer le mot de passe de chaque gateway et le mettre dans un fichier : 
	* pour les BS multitech : lrrpass <serial_number> <vendor_name>
	* pour toutes les autres BS : lrrpass <last_8_of_UUID_or_ID> <vendor_name>

==== Génération des rescue ports pour les BS ====

* mettre les fonctions autoreverse et autoreversev2 dans .bashrc ou .zshrc
* mettre les LRRID dans un array
* passer en boucle sur l'array pour générer le port et le mettre dans un fichier : 
	* pour les gateways qui utilisent le LRRID (Que les Swisscom sauf Tektelik) : autoreverse
	* pour les gateways qui utilisent le LRRUUID (Tous ceux qui sont sur le SaaS et qui ont TPE, et que les Tektelik chez Swisscom) : autoreverse2

==== Exécuter un script sur une BS ====

* mettre le script (exécutable : chmod +x <script_name>) sur le LRC : scp <script_name>  <username>@<lrc_address>:~/
* compresser dans un fichier avec l'extension .tar.gz : tar czf <archive_name>.tar.gz <script_name>
* mettre le checksum md5 dans un fichier du même nom avec l'extension .md5 : md5sum <archive_name>.tar.gz | awk '{print $1}' > <archive_name>.md5
* mettre les deux fichiers dans le répertoire /var/actility-ftp : cp <archive_name>.* /var/actility-ftp/
* se connecter à la BS depuis le LRC pour exécuter la commande dngentar :
	* telnet 0 2009
	* lrr shell <lrr_id>
	* dngentar -T <archive_name> -D /home/actility ?

==== Mise à jour de LRR avec les commandes lrrshell ====

* Changements majeurs
	* dngentar -T <archive_name> -D /home/actility ?
* Changements mineurs
	* upgrade -V <version>
* Quand ça marche pas
	* vérifier l'espace disque, particulièrement charon
	* ouvrir une connexion en reverse sur la GW et copier l'archive depuis le serveur support

==== Mise à jour de LRR à partir de l'archive ====

=== Multitech ===

cd /home/actility/;
mv lrr lrr.bkp
tar xvf $archive
$ROOTACT/lrr/com/sysconfiglrr.sh
/etc/init.d/lrr restart
rm $archive

==== Connexion remote en rescue ====

* Définir les variables d'environnement :
# export sockets_root=/home/tpe-ocp/remote-sockets
# export session_name=<session_id>

* Ouvrir les connexions vers le serveur support en utilisant le remote reverse ssh user/pwd :
# sudo ssh -L127.0.0.1:9090:$sockets_root/$session_name.cockpit.socket -L127.0.0.1:443:$sockets_root/$session_name.https.socket -L127.0.0.1:30003:$sockets_root/$session_name.ssh.socket -p 443 sligue@tpe-remote-support.actility.com -N -f

* Se connecter par ssh au noeud primaire de l'installation du client en utilisant le pwd donné par ce dernier :
# ssh -p 30003 remote-support@localhost

* Se connecter à cockpit en utilisant les mêmes accès que précédemment via l'url https://127.0.0.1:9090

* Mettre le  DNS hostname configuré par le client à l'adresse locale pour se connecter à la GUI en utilisant le user rescue@thingpark.local, le même mdp que précédement via l'url https://<dns_hostname>

==== Reflasher le FPGA ====

=== From lrc ===
lrr shell <lrrid> dngentar -T <fpga_archive>
lrr shell <lrrid> dngentar -T fpgaup_61 ?

=== Manually for ufispace macro v2 ===
1. copy file fpga to GW /tmp directory
2. extract the file tar –xvzf documents.tar.gz
3. cp /tmp/GW2_CYCLONEV_v61_DSP_v37_SX1388-F11-FOXCONN.jic [[/home/root/GW2_CYCLONEV_v61_DSP_v37_SX1388-F11-FOXCONN.jic]]
4. cd /home/root
5. chown root:root GW2_CYCLONEV_v61_DSP_v37_SX1388-F11-FOXCONN.jic
6. ./fpga_flash_loader -b 0 -d /dev/spidev2.0 -w -i -f GW2_CYCLONEV_v61_DSP_v37_SX1388-F11-FOXCONN.jic

==== Decryption on GW ====
'''

VPN_CFG="$ROOTACT/usr/etc/lrr/vpn.cfg"
KEY=$(grep -e "KEY=" $VPN_CFG | cut -d"=" -f2)
PASS=$(grep -e "PASS=" $VPN_CFG | sed -e 's/^PASS=//')
ID=$(grep -e "PRESTAGER=" $VPN_CFG | cut -d"=" -f2)
echo "$PASS" | openssl enc -aes-256-cbc -base64 -d -pass pass:"${KEY}+${ID}" | awk '{ printf $1 }'
'''


===== Builder des images de LRR =====

==== Build de l'image ====



=== Multitech ===

* cloner le repo git GatewayPackager_<constructeur> (https://git.int.actility.com/NetOps/runbooks/-/tree/master/platform_remote_access)
* copier le répertoire de config correspondant au client ou à la plateforme : pour les TPE le répertoire Tpe_SAAS_EU.nfr920 est utilisé comme référence
	* cp -r Tpe_SAAS_EU.nfr920 new_config
* copier tous les fichiers de configuration depuis une GW qui fonctionne bien dans les répertoires de build de l'image
* lancer le build de l'image en root. Les options demandées sont la version (pico pour pico, mlb pour macro1.5, loc pour macro2.0)
	* sudo -i
	* pour une pico : ./genrootfs.sh -c new_config -l lrr-2.4.97-fcpico -g pico
	* pour une macro : ./genrootfs.sh -c Swisscom_new -l lrr-2.4.97-fcloc -g macro2.0

=== Kerlink ===



==== Connexion au lab d'Actility pour tester l'image ====

* se connecter au wiki [[https://wiki.int.actility.com/xwiki/wiki/xwikiproduct/view/Product Group Portal/Ecosystem Base Station/Base Station Lab/]] pour voir les instructions et les liens
* accéder à l'inventaire par le lien Ecosystem GW LAB Inventory pour sélectionner et réserver une GW libre sur une période
* la réservation se fait en ajoutant une entrée comme  (Stephen 3 - 7 Jan) sur la ligne du lab de la GW en question dans la feuille de calcul Booking Timetable
* accéder à la GW en passant par l'un des serveurs de lab (main lab par exemple) pour bénéficier de sa connexion avec un clable série aux GW
* on peut accéder à la GW directement
* copier l'image sur la GW et effectuer l'upgrade
* déclarer le GW sur la plateforme du client pour tester (accéder au networkManager du client en utilisant le pwm de actility)

==== Installation de l'image sur les BS des clients ====

* copier l'image sur le LCR du client
* écrire un script pour exécuter les commandes d'installation
* suivre les étapes de **Exécuter un script sur une BS** en archivant le script et l'image
* lancer l'exécution sur les BS avec une boucle
